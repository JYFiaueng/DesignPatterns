2016年6月12日 18:24:13

设计原则：单一职责原则、里氏替换原则、依赖倒置原则、接口隔离原则、合成复用原则和最少知识原则。


一、单一职责原则（SRP）
就一个类、对象或方法而言，应该仅有一个引起他变化的原因。
SRP的职责被定义为引起变化的原因，每个职责都是变化的一个轴线，如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大，这样的方法通常是一个不稳定的方法。
对于总是同时变化的职责不必要分离他们，对于很少发生改变的职责在需要分离的时候再去分离。
在人的常规思维中，总是习惯性的把一组相关的行为放在一起，如何正确的分离职责不是一件容易的事。
SRP原则的优点是降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度。
功能更细意味着对象越分散越多，需要寻找到这之间一个最优的平衡点。


二、最少知识原则（LKP）
LKP说的是一个软件实体应当尽可能少地与其他实体发生相互作用。
如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的相互联系，常见的做法是引入一个第三者对象来承担这些对象之间的通信作用。


三、开放-封闭原则
定义：软件实体（类、函数、模块）等应该是可以扩展的，但是不可修改。
过多的条件分支语句是造成程序违反开放-封闭原则的一个常见原因。
当我们遇到一大片if或switch语句时，第一时间就应该考虑，能否利用对象的多态性来重构他们。


如果一个函数过长，不得不加上若干注释才能让这个函数显得易读一些，那这个函数就很有必要进行重构。